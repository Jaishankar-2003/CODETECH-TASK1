import re

def check_password_strength(password):
    """
    Checks the strength of a password based on length, complexity, and uniqueness.

    Args:
        password (str): The password to be evaluated.

    Returns:
        str: A message indicating the password strength.
    """

    # Define regular expressions for different character types
    has_number = re.compile(r'\d')
    has_lower = re.compile(r'[a-z]')
    has_upper = re.compile(r'[A-Z]')
    has_special = re.compile(r'[^\w\s]')

    # Check password length
    if len(password) < 8:
        return "Weak: Password too short. Minimum length is 8 characters."

    # Check for different character types
    if not has_lower.search(password):
        return "Weak: Password should contain at least one lowercase letter."
    if not has_upper.search(password):
        return "Weak: Password should contain at least one uppercase letter."
    if not has_number.search(password):
        return "Weak: Password should contain at least one number."
    if not has_special.search(password):
        return "Weak: Password should contain at least one special character."

    # Check for common patterns
    common_patterns = ["password", "123456", "qwerty", "asdfghjkl"]
    if password.lower() in common_patterns:
        return "Weak: Password is too common."

    # Check for repeated characters
    if len(set(password)) < len(password) / 2:
        return "Weak: Password contains too many repeated characters."

    # Check for dictionary words
    # (You can implement dictionary checking using a wordlist or a third-party library)

    # If all checks pass, the password is considered strong
    return "Strong password!"

if __name__ == "__main__":
    password = input("Enter your password: ")
    strength = check_password_strength(password)
    print(strength)
